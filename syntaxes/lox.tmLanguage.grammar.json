{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Lox",
	"patterns": [
		{ "include": "#declaration" },
		{ "include": "#statement" },
		{ "include": "#expression" }
	],
	"repository": {
		"declaration": {
			"patterns": [
				{ "include": "#classDeclaration" },
				{ "include": "#functionDeclaration" },
				{ "include": "#methodDeclaration" },
				{ "include": "#variableDeclaration" }
			]
		},
		"statement": {
			"patterns": [
				{ "include": "#for" },
				{ "include": "#if" },
				{ "include": "#else" },
				{ "include": "#print" },
				{ "include": "#return" },
				{ "include": "#while" },
				{ "include": "#block" }
			]
		},
		"expression": {
			"patterns": [
				{ "include": "#call" },
				{ "include": "#operator" },
				{ "include": "#primary" }
			]
		},
		"variableDeclaration": {
			"name": "meta.variable.declaration.lox",
			"match": "\\b(var)\\s+(\\w+)(?:\\s*(=)\\s*(.*))?;",
			"captures": {
				"1": { "name": "keyword.other.var.lox" },
				"2": { "patterns": [{ "include": "#identifier" }]},
				"3": { "name": "keyword.operator.assignment.lox" },
				"4": { "patterns": [{ "include": "#expression" }]}
			}
		},
		"classDeclaration": {
			"name": "meta.class.declaration.lox",
			"begin": "\\b(class)\\s+(\\w+)(?:\\s+<\\s+(\\w+))?\\s*\\{",
			"end": "\\}",
			"captures": {
				"1": { "name": "keyword.other.class.lox" },
				"2": { "name": "entity.name.class.lox" },
				"3": { "name": "entity.name.class.subclass.lox" }
			},
			"patterns": [
				{ "include": "#blockContents" }
			]
		},
		"methodDeclaration": {
			"name": "meta.method.declaration.lox",
			"begin": "\\b(\\w+)(\\(.*\\))\\s*{",
			"end": "\\}",
			"captures": {
				"1": { "name": "entity.name.function.method.lox" },
				"2": { "patterns": [{ "include": "#parameters" }]}
			},
			"patterns": [
				{ "include": "#blockContents" }
			]
		},
		"functionDeclaration": {
			"name": "meta.function.declaration.lox",
			"begin": "\\b(fun)\\s+(\\w+)(\\(.*\\))\\s*{",
			"end": "\\}",
			"captures": {
				"1": { "name": "keyword.other.function.lox"},
				"2": { "name": "entity.name.function.lox" },
				"3": { "patterns": [{ "include": "#parameters" }] }
			},
			"patterns": [
				{ "include": "#blockContents" }
			]
		},
		"for": {
			"comment": "TODO"
		},
		"if": {
			"match": "\\b(if)\\s*\\((.*)\\)(.*)",
			"captures": {
				"1": { "name": "keyword.control.conditional.if.lox" },
				"2": { "patterns": [{ "include": "#expression" }]},
				"3": { "patterns": [{ "include": "#statement" }]}
			}
		},
		"else": {
			"match": "\\b(else)\\b(.*)",
			"captures": {
				"1": { "name": "keyword.control.conditional.else.lox" },
				"2": { "patterns": [{ "include": "#statement" }]}
			}
		},
		"print": {
			"match": "\\b(print)\\s+(.*);",
			"captures": {
				"1": { "name": "keyword.other.builtin.print.lox" },
				"2": { "patterns": [{ "include": "#expression" }]}
			}
		},
		"return": {
			"match": "\\b(return)\\s*(?:\\s+(.*))?;",
			"captures": {
				"1": { "name": "keyword.control.flow.return.lox" },
				"2": { "patterns": [{ "include": "#expression" }]}
			}
		},
		"while": {
			"match": "\\b(while)\\s*\\((.*)\\)",
			"captures": {
				"1": { "name": "keyword.control.loop.while.lox" },
				"2": { "patterns": [{ "include": "#expression" }]}
			}
		},
		"block": {
			"name": "meta.block.lox",
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": { "name": "meta.block.begin.lox" }
			},
			"endCaptures": {
				"0": { "name": "meta.block.end.lox" }
			},
			"patterns": [
				{ "include": "#blockContents" }
			]
		},
		"blockContents": {
			"patterns": [
				{ "include": "#declaration" },
				{ "include": "#statement" },
				{ "include": "#expression" }
			]
		},
		"call": {
			"name": "meta.function.call.lox",
			"match": "\\b(\\w+)(\\(.*\\))",
			"captures": {
				"1": { "name": "entity.name.function.lox" },
				"2": { "patterns": [{ "include": "#arguments" }]}
			}
		},
		"arguments": {
			"name": "meta.function.arguments.lox",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "meta.function.arguments.begin.lox" }
			},
			"endCaptures": {
				"0": { "name": "meta.function.arguments.end.lox" }
			},
			"patterns": [
				{ "include": "#expressionList" },
				{ "include": "#expression"}
			]
		},
		"expressionList": {
			"match": "\\s*(.*?),(.*)",
			"captures": {
				"1": { "patterns": [{ "include": "#expression" }]},
				"2": { "patterns": [
					{ "include": "#expressionList" },
					{ "include": "#expression" }
				]}
			}
		},
		"parameters": {
			"name": "meta.function.parameters.lox",
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": { "name": "meta.function.parameters.begin.lox" }
			},
			"endCaptures": {
				"0": { "name": "meta.function.parameters.end.lox" }
			},
			"patterns": [
				{ "include": "#identifierList" },
				{ "include": "#identifier" }
			]
		},
		"identifierList": {
			"match": "\\s*(.*?),(.*)",
			"captures": {
				"1": { "patterns": [{ "include": "#identifier" }]},
				"2": { "patterns": [
					{ "include": "#identifierList" },
					{ "include": "#identifier" }
				]}
			}
		},
		"operator": {
			"patterns": [
				{
					"name": "keyword.operator.equality.equal.lox",
					"match": "=="
				},
				{
					"name": "keyword.operator.equality.notEqual.lox",
					"match": "!="
				},
				{
					"name": "keyword.operator.logical.or.lox",
					"match": "\\b(or)\\b"
				},
				{
					"name": "keyword.operator.logical.and.lox",
					"match": "\\b(and)\\b"
				},
				{
					"name": "keyword.operator.logical.not.lox",
					"match": "!"
				},
				{
					"name": "keyword.operator.comparison.lessThanOrEqual.lox",
					"match": "<="
				},
				{
					"name": "keyword.operator.comparison.lessThan.lox",
					"match": "<"
				},
				{
					"name": "keyword.operator.comparison.greaterThanOrEqual.lox",
					"match": ">"
				},
				{
					"name": "keyword.operator.comparison.greaterThan.lox",
					"match": ">="
				},
				{
					"name": "keyword.operator.assignment.lox",
					"match": "="
				}
			]
		},
		"primary": {
			"patterns": [
				{
					"name": "constant.language.lox",
					"match": "\\b(true|false|nil)\\b"
				},
				{
					"name": "variable.language.lox",
					"match": "\\b(super|this)\\b"
				},
				{
					"include": "#number"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#string"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [{ "include": "#expression" }]
				}
			]
		},
		"number": {
			"name": "constant.numeric.number",
			"match": "\\d+(\\.\\d+)?"
		},
		"identifier": {
			"name": "variable.other.lox",
			"match": "[A-Za-z][A-Za-z0-9_]*"
		},
		"string": {
			"name": "string.quoted.double.lox",
			"begin": "\"",
			"end": "\""
		}
	},
	"scopeName": "source.lox"
}