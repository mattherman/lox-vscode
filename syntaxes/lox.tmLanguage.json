{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Lox",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.conditional.lox",
					"match": "\\b(if|else)\\b"
				},
				{
					"name": "keyword.control.loop.lox",
					"match": "\\b(while|for)\\b"
				},
				{
					"name": "keyword.control.flow.lox",
					"match": "\\b(return)\\b"
				},
				{
					"name": "keyword.other.builtin.lox",
					"match": "\\b(print)\\b"
				},
				{
					"name": "variable.language.lox",
					"match": "\\b(super|this)\\b"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"match": "\\b(class)\\s+([A-Za-z][A-Za-z0-9_]*)(\\s+<\\s+([A-Za-z][A-Za-z0-9_]*))?\\s*{",
					"captures": {
						"1": { "name": "keyword.other.class.lox" },
						"2": { "name": "entity.name.class.lox" },
						"4": { "name": "entity.name.class.subclass.lox" }
					}
				},
				{
					"match": "(\\bfun\\s+)?([A-Za-z][A-Za-z0-9_]*)\\(.*\\)\\s*{",
					"captures": {
						"1": { "name": "keyword.other.function.lox" },
						"2": { "name": "entity.name.function.lox" }
					}
				},
				{
					"match": "\\b(var)\\s+([A-Za-z][A-Za-z0-9_]*)",
					"captures": {
						"1": { "name": "keyword.other.var.lox" },
						"2": { "name": "entity.name.variable.lox" }
					}
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"match": "([A-Za-z][A-Za-z0-9_]*)\\(.*\\)",
					"captures": {
						"1": { "name": "entity.name.function.call.lox" }
					}
				},
				{
					"match": "\\.([A-Za-z][A-Za-z0-9_]*)\\(.*\\)",
					"captures": {
						"1": { "name": "entity.name.function.method.call.lox" }
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.local.lox",
					"match": "\\b[A-Za-z][A-Za-z0-9_]*\\b"
				},
				{
					"match": "\\.([A-Za-z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": { "name": "variable.other.property.lox" }
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.equality.equal.lox",
					"match": "=="
				},
				{
					"name": "keyword.operator.equality.notEqual.lox",
					"match": "!="
				},
				{
					"name": "keyword.operator.logical.or.lox",
					"match": "\\b(or)\\b"
				},
				{
					"name": "keyword.operator.logical.and.lox",
					"match": "\\b(and)\\b"
				},
				{
					"name": "keyword.operator.logical.not.lox",
					"match": "!"
				},
				{
					"name": "keyword.operator.comparison.lessThanOrEqual.lox",
					"match": "<="
				},
				{
					"name": "keyword.operator.comparison.lessThan.lox",
					"match": "<"
				},
				{
					"name": "keyword.operator.comparison.greaterThanOrEqual.lox",
					"match": ">"
				},
				{
					"name": "keyword.operator.comparison.greaterThan.lox",
					"match": ">="
				},
				{
					"name": "keyword.operator.assignment.lox",
					"match": "="
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.lox",
					"match": "\\b(true|false|nil)\\b"
				},
				{
					"name": "constant.numeric.number",
					"match": "\\d+(\\.\\d+)?"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.lox",
			"begin": "\"",
			"end": "\""
		}
	},
	"scopeName": "source.lox"
}